=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'date'

module EgoiRubyClient
  # Automation schema
  class Automation
    attr_accessor :automation_id

    # Automation title
    attr_accessor :title

    attr_accessor :list_id

    # Automation status
    attr_accessor :status

    attr_accessor :created_by

    # True if the automation allows multiple contacts, false otherwise
    attr_accessor :allow_multiple_contacts

    # Contact limit for the automation. Contact limit value (value '0' is returned if contact                                 limit is not enabled)
    attr_accessor :contact_limit

    attr_accessor :created

    attr_accessor :updated

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'automation_id' => :'automation_id',
        :'title' => :'title',
        :'list_id' => :'list_id',
        :'status' => :'status',
        :'created_by' => :'created_by',
        :'allow_multiple_contacts' => :'allow_multiple_contacts',
        :'contact_limit' => :'contact_limit',
        :'created' => :'created',
        :'updated' => :'updated'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'automation_id' => :'Integer',
        :'title' => :'String',
        :'list_id' => :'Integer',
        :'status' => :'String',
        :'created_by' => :'Integer',
        :'allow_multiple_contacts' => :'BOOLEAN',
        :'contact_limit' => :'Integer',
        :'created' => :'Date',
        :'updated' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'automation_id')
        self.automation_id = attributes[:'automation_id']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'list_id')
        self.list_id = attributes[:'list_id']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.has_key?(:'allow_multiple_contacts')
        self.allow_multiple_contacts = attributes[:'allow_multiple_contacts']
      else
        self.allow_multiple_contacts = true
      end

      if attributes.has_key?(:'contact_limit')
        self.contact_limit = attributes[:'contact_limit']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@automation_id.nil? && @automation_id < 1
        invalid_properties.push('invalid value for "automation_id", must be greater than or equal to 1.')
      end

      if !@list_id.nil? && @list_id < 1
        invalid_properties.push('invalid value for "list_id", must be greater than or equal to 1.')
      end

      if !@created_by.nil? && @created_by < 1
        invalid_properties.push('invalid value for "created_by", must be greater than or equal to 1.')
      end

      if !@contact_limit.nil? && @contact_limit < 0
        invalid_properties.push('invalid value for "contact_limit", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@automation_id.nil? && @automation_id < 1
      return false if !@list_id.nil? && @list_id < 1
      status_validator = EnumAttributeValidator.new('String', ['active', 'inactive'])
      return false unless status_validator.valid?(@status)
      return false if !@created_by.nil? && @created_by < 1
      return false if !@contact_limit.nil? && @contact_limit < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] automation_id Value to be assigned
    def automation_id=(automation_id)
      if !automation_id.nil? && automation_id < 1
        fail ArgumentError, 'invalid value for "automation_id", must be greater than or equal to 1.'
      end

      @automation_id = automation_id
    end

    # Custom attribute writer method with validation
    # @param [Object] list_id Value to be assigned
    def list_id=(list_id)
      if !list_id.nil? && list_id < 1
        fail ArgumentError, 'invalid value for "list_id", must be greater than or equal to 1.'
      end

      @list_id = list_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['active', 'inactive'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by)
      if !created_by.nil? && created_by < 1
        fail ArgumentError, 'invalid value for "created_by", must be greater than or equal to 1.'
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_limit Value to be assigned
    def contact_limit=(contact_limit)
      if !contact_limit.nil? && contact_limit < 0
        fail ArgumentError, 'invalid value for "contact_limit", must be greater than or equal to 0.'
      end

      @contact_limit = contact_limit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          automation_id == o.automation_id &&
          title == o.title &&
          list_id == o.list_id &&
          status == o.status &&
          created_by == o.created_by &&
          allow_multiple_contacts == o.allow_multiple_contacts &&
          contact_limit == o.contact_limit &&
          created == o.created &&
          updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [automation_id, title, list_id, status, created_by, allow_multiple_contacts, contact_limit, created, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EgoiRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
