=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module EgoiRubyClient
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Attach tag to contact
    # Attaches a tag to the provided contacts
    # @param list_id ID of the List
    # @param attach_tag_request Parameters for the Tag
    # @param [Hash] opts the optional parameters
    # @return [AttachTagResponse]
    def action_attach_tag(list_id, attach_tag_request, opts = {})
      data, _status_code, _headers = action_attach_tag_with_http_info(list_id, attach_tag_request, opts)
      data
    end

    # Attach tag to contact
    # Attaches a tag to the provided contacts
    # @param list_id ID of the List
    # @param attach_tag_request Parameters for the Tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachTagResponse, Fixnum, Hash)>] AttachTagResponse data, response status code and response headers
    def action_attach_tag_with_http_info(list_id, attach_tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_attach_tag ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_attach_tag"
      end
      # verify the required parameter 'attach_tag_request' is set
      if @api_client.config.client_side_validation && attach_tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'attach_tag_request' when calling ContactsApi.action_attach_tag"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/attach-tag'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(attach_tag_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AttachTagResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_attach_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach tag to contact
    # Detach a tag to the provided contacts
    # @param list_id ID of the List
    # @param attach_tag_request Parameters for the Tag
    # @param [Hash] opts the optional parameters
    # @return [AttachTagResponse]
    def action_detach_tag(list_id, attach_tag_request, opts = {})
      data, _status_code, _headers = action_detach_tag_with_http_info(list_id, attach_tag_request, opts)
      data
    end

    # Detach tag to contact
    # Detach a tag to the provided contacts
    # @param list_id ID of the List
    # @param attach_tag_request Parameters for the Tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachTagResponse, Fixnum, Hash)>] AttachTagResponse data, response status code and response headers
    def action_detach_tag_with_http_info(list_id, attach_tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_detach_tag ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_detach_tag"
      end
      # verify the required parameter 'attach_tag_request' is set
      if @api_client.config.client_side_validation && attach_tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'attach_tag_request' when calling ContactsApi.action_detach_tag"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/detach-tag'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(attach_tag_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AttachTagResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_detach_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exports a list of contacts
    # Exports a list of contacts to the desired callback url
    # @param list_id ID of the List
    # @param contact_export_request Parameters for export
    # @param [Hash] opts the optional parameters
    # @return [AcceptedResponse]
    def action_export_contacts(list_id, contact_export_request, opts = {})
      data, _status_code, _headers = action_export_contacts_with_http_info(list_id, contact_export_request, opts)
      data
    end

    # Exports a list of contacts
    # Exports a list of contacts to the desired callback url
    # @param list_id ID of the List
    # @param contact_export_request Parameters for export
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptedResponse, Fixnum, Hash)>] AcceptedResponse data, response status code and response headers
    def action_export_contacts_with_http_info(list_id, contact_export_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_export_contacts ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_export_contacts"
      end
      # verify the required parameter 'contact_export_request' is set
      if @api_client.config.client_side_validation && contact_export_request.nil?
        fail ArgumentError, "Missing the required parameter 'contact_export_request' when calling ContactsApi.action_export_contacts"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/export'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_export_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_export_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import collection of contacts
    # Imports a collection of contacts
    # @param list_id ID of the List
    # @param import_bulk_request Parameters for the bulk import
    # @param [Hash] opts the optional parameters
    # @return [AcceptedResponse]
    def action_import_bulk(list_id, import_bulk_request, opts = {})
      data, _status_code, _headers = action_import_bulk_with_http_info(list_id, import_bulk_request, opts)
      data
    end

    # Import collection of contacts
    # Imports a collection of contacts
    # @param list_id ID of the List
    # @param import_bulk_request Parameters for the bulk import
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptedResponse, Fixnum, Hash)>] AcceptedResponse data, response status code and response headers
    def action_import_bulk_with_http_info(list_id, import_bulk_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_import_bulk ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_import_bulk"
      end
      # verify the required parameter 'import_bulk_request' is set
      if @api_client.config.client_side_validation && import_bulk_request.nil?
        fail ArgumentError, "Missing the required parameter 'import_bulk_request' when calling ContactsApi.action_import_bulk"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/import-bulk'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(import_bulk_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AcceptedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_import_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start automation
    # Start automation to the provided contacts
    # @param list_id ID of the List
    # @param start_automation_request Parameters for the operation to start automation
    # @param [Hash] opts the optional parameters
    # @return [StartAutomationResponse]
    def action_start_automation(list_id, start_automation_request, opts = {})
      data, _status_code, _headers = action_start_automation_with_http_info(list_id, start_automation_request, opts)
      data
    end

    # Start automation
    # Start automation to the provided contacts
    # @param list_id ID of the List
    # @param start_automation_request Parameters for the operation to start automation
    # @param [Hash] opts the optional parameters
    # @return [Array<(StartAutomationResponse, Fixnum, Hash)>] StartAutomationResponse data, response status code and response headers
    def action_start_automation_with_http_info(list_id, start_automation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_start_automation ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_start_automation"
      end
      # verify the required parameter 'start_automation_request' is set
      if @api_client.config.client_side_validation && start_automation_request.nil?
        fail ArgumentError, "Missing the required parameter 'start_automation_request' when calling ContactsApi.action_start_automation"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/start-automation'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(start_automation_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StartAutomationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_start_automation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribes contacts
    # Unsubscribes contacts
    # @param list_id ID of the List
    # @param remove_request Parameters for the contact to unsubscribe
    # @param [Hash] opts the optional parameters
    # @return [RemoveResponse]
    def action_unsubscribe_contact(list_id, remove_request, opts = {})
      data, _status_code, _headers = action_unsubscribe_contact_with_http_info(list_id, remove_request, opts)
      data
    end

    # Unsubscribes contacts
    # Unsubscribes contacts
    # @param list_id ID of the List
    # @param remove_request Parameters for the contact to unsubscribe
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveResponse, Fixnum, Hash)>] RemoveResponse data, response status code and response headers
    def action_unsubscribe_contact_with_http_info(list_id, remove_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.action_unsubscribe_contact ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.action_unsubscribe_contact"
      end
      # verify the required parameter 'remove_request' is set
      if @api_client.config.client_side_validation && remove_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_request' when calling ContactsApi.action_unsubscribe_contact"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/actions/unsubscribe'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#action_unsubscribe_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new contact
    # Create a new contact
    # @param list_id ID of the list where the contact belongs
    # @param contact_base_extra Parameters for the Contact
    # @param [Hash] opts the optional parameters
    # @return [CreateContactResponse]
    def create_contact(list_id, contact_base_extra, opts = {})
      data, _status_code, _headers = create_contact_with_http_info(list_id, contact_base_extra, opts)
      data
    end

    # Create new contact
    # Create a new contact
    # @param list_id ID of the list where the contact belongs
    # @param contact_base_extra Parameters for the Contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateContactResponse, Fixnum, Hash)>] CreateContactResponse data, response status code and response headers
    def create_contact_with_http_info(list_id, contact_base_extra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.create_contact ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.create_contact"
      end
      # verify the required parameter 'contact_base_extra' is set
      if @api_client.config.client_side_validation && contact_base_extra.nil?
        fail ArgumentError, "Missing the required parameter 'contact_base_extra' when calling ContactsApi.create_contact"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_base_extra)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateContactResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#create_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all contact activities
    # Returns all contact activities
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [DateTime] :date_min Start date
    # @option opts [DateTime] :date_max End date
    # @return [ActivityCollection]
    def get_all_contact_activities(contact_id, list_id, opts = {})
      data, _status_code, _headers = get_all_contact_activities_with_http_info(contact_id, list_id, opts)
      data
    end

    # Get all contact activities
    # Returns all contact activities
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return
    # @option opts [DateTime] :date_min Start date
    # @option opts [DateTime] :date_max End date
    # @return [Array<(ActivityCollection, Fixnum, Hash)>] ActivityCollection data, response status code and response headers
    def get_all_contact_activities_with_http_info(contact_id, list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_all_contact_activities ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsApi.get_all_contact_activities"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.get_all_contact_activities"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ContactsApi.get_all_contact_activities, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactsApi.get_all_contact_activities, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactsApi.get_all_contact_activities, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/lists/{list_id}/contacts/{contact_id}/activities'.sub('{' + 'contact_id' + '}', contact_id.to_s).sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'date_min'] = opts[:'date_min'] if !opts[:'date_min'].nil?
      query_params[:'date_max'] = opts[:'date_max'] if !opts[:'date_max'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivityCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_all_contact_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all contacts
    # Returns all contacts
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @return [ContactCollection]
    def get_all_contacts(list_id, opts = {})
      data, _status_code, _headers = get_all_contacts_with_http_info(list_id, opts)
      data
    end

    # Get all contacts
    # Returns all contacts
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return
    # @return [Array<(ContactCollection, Fixnum, Hash)>] ContactCollection data, response status code and response headers
    def get_all_contacts_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_all_contacts ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.get_all_contacts"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ContactsApi.get_all_contacts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactsApi.get_all_contacts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ContactsApi.get_all_contacts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/lists/{list_id}/contacts'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_all_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contact
    # Returns contact information given its ID
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @return [ComplexContact]
    def get_contact(contact_id, list_id, opts = {})
      data, _status_code, _headers = get_contact_with_http_info(contact_id, list_id, opts)
      data
    end

    # Get contact
    # Returns contact information given its ID
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComplexContact, Fixnum, Hash)>] ComplexContact data, response status code and response headers
    def get_contact_with_http_info(contact_id, list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsApi.get_contact"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.get_contact"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/{contact_id}'.sub('{' + 'contact_id' + '}', contact_id.to_s).sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComplexContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific contact
    # Update contact
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param contact_base_status_extra Parameters for the contact
    # @param [Hash] opts the optional parameters
    # @return [CreateContactResponse]
    def patch_contact(contact_id, list_id, contact_base_status_extra, opts = {})
      data, _status_code, _headers = patch_contact_with_http_info(contact_id, list_id, contact_base_status_extra, opts)
      data
    end

    # Update a specific contact
    # Update contact
    # @param contact_id ID of the Contact
    # @param list_id ID of the List
    # @param contact_base_status_extra Parameters for the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateContactResponse, Fixnum, Hash)>] CreateContactResponse data, response status code and response headers
    def patch_contact_with_http_info(contact_id, list_id, contact_base_status_extra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.patch_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsApi.patch_contact"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ContactsApi.patch_contact"
      end
      # verify the required parameter 'contact_base_status_extra' is set
      if @api_client.config.client_side_validation && contact_base_status_extra.nil?
        fail ArgumentError, "Missing the required parameter 'contact_base_status_extra' when calling ContactsApi.patch_contact"
      end
      # resource path
      local_var_path = '/lists/{list_id}/contacts/{contact_id}'.sub('{' + 'contact_id' + '}', contact_id.to_s).sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_base_status_extra)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateContactResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#patch_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
