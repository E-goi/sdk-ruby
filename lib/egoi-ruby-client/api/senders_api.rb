=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module EgoiRubyClient
  class SendersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create cellphone sender
    # Creates a cellphone sender
    # @param cellphone_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [CellphoneSender]
    def create_cellphone_sender(cellphone_sender, opts = {})
      data, _status_code, _headers = create_cellphone_sender_with_http_info(cellphone_sender, opts)
      data
    end

    # Create cellphone sender
    # Creates a cellphone sender
    # @param cellphone_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(CellphoneSender, Fixnum, Hash)>] CellphoneSender data, response status code and response headers
    def create_cellphone_sender_with_http_info(cellphone_sender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.create_cellphone_sender ...'
      end
      # verify the required parameter 'cellphone_sender' is set
      if @api_client.config.client_side_validation && cellphone_sender.nil?
        fail ArgumentError, "Missing the required parameter 'cellphone_sender' when calling SendersApi.create_cellphone_sender"
      end
      # resource path
      local_var_path = '/senders/cellphone'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cellphone_sender)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CellphoneSender')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#create_cellphone_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create email sender
    # Creates an email sender
    # @param email_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [EmailSender]
    def create_email_sender(email_sender, opts = {})
      data, _status_code, _headers = create_email_sender_with_http_info(email_sender, opts)
      data
    end

    # Create email sender
    # Creates an email sender
    # @param email_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSender, Fixnum, Hash)>] EmailSender data, response status code and response headers
    def create_email_sender_with_http_info(email_sender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.create_email_sender ...'
      end
      # verify the required parameter 'email_sender' is set
      if @api_client.config.client_side_validation && email_sender.nil?
        fail ArgumentError, "Missing the required parameter 'email_sender' when calling SendersApi.create_email_sender"
      end
      # resource path
      local_var_path = '/senders/email'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_sender)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSender')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#create_email_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create phone sender
    # Creates a phone sender
    # @param phone_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [PhoneSender]
    def create_phone_sender(phone_sender, opts = {})
      data, _status_code, _headers = create_phone_sender_with_http_info(phone_sender, opts)
      data
    end

    # Create phone sender
    # Creates a phone sender
    # @param phone_sender Parameters for the sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneSender, Fixnum, Hash)>] PhoneSender data, response status code and response headers
    def create_phone_sender_with_http_info(phone_sender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.create_phone_sender ...'
      end
      # verify the required parameter 'phone_sender' is set
      if @api_client.config.client_side_validation && phone_sender.nil?
        fail ArgumentError, "Missing the required parameter 'phone_sender' when calling SendersApi.create_phone_sender"
      end
      # resource path
      local_var_path = '/senders/phone'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(phone_sender)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhoneSender')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#create_phone_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove cellphone sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cellphone_sender(sender_id, opts = {})
      delete_cellphone_sender_with_http_info(sender_id, opts)
      nil
    end

    # Remove cellphone sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cellphone_sender_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.delete_cellphone_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.delete_cellphone_sender"
      end
      # resource path
      local_var_path = '/senders/cellphone/{sender_id}'.sub('{' + 'sender_id' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#delete_cellphone_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove email sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_email_sender(sender_id, opts = {})
      delete_email_sender_with_http_info(sender_id, opts)
      nil
    end

    # Remove email sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_email_sender_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.delete_email_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.delete_email_sender"
      end
      # resource path
      local_var_path = '/senders/email/{sender_id}'.sub('{' + 'sender_id' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#delete_email_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove phone sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_phone_sender(sender_id, opts = {})
      delete_phone_sender_with_http_info(sender_id, opts)
      nil
    end

    # Remove phone sender
    # Remove sender information given its ID
    # @param sender_id ID of the Sender
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_phone_sender_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.delete_phone_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.delete_phone_sender"
      end
      # resource path
      local_var_path = '/senders/phone/{sender_id}'.sub('{' + 'sender_id' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#delete_phone_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all cellphone senders
    # Returns all cellphone senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [String] :status Status filter
    # @return [CellphoneSenderCollection]
    def get_all_cellphone_senders(opts = {})
      data, _status_code, _headers = get_all_cellphone_senders_with_http_info(opts)
      data
    end

    # Get all cellphone senders
    # Returns all cellphone senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return
    # @option opts [String] :status Status filter
    # @return [Array<(CellphoneSenderCollection, Fixnum, Hash)>] CellphoneSenderCollection data, response status code and response headers
    def get_all_cellphone_senders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.get_all_cellphone_senders ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling SendersApi.get_all_cellphone_senders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_cellphone_senders, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_cellphone_senders, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['active', 'moderation', 'rejected'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of active, moderation, rejected'
      end
      # resource path
      local_var_path = '/senders/cellphone'

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CellphoneSenderCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#get_all_cellphone_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all email senders
    # Returns all email senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [String] :status Status filter
    # @return [EmailSenderCollection]
    def get_all_email_senders(opts = {})
      data, _status_code, _headers = get_all_email_senders_with_http_info(opts)
      data
    end

    # Get all email senders
    # Returns all email senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return
    # @option opts [String] :status Status filter
    # @return [Array<(EmailSenderCollection, Fixnum, Hash)>] EmailSenderCollection data, response status code and response headers
    def get_all_email_senders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.get_all_email_senders ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling SendersApi.get_all_email_senders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_email_senders, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_email_senders, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['active', 'moderation', 'rejected'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of active, moderation, rejected'
      end
      # resource path
      local_var_path = '/senders/email'

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSenderCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#get_all_email_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all phone senders
    # Returns all phone senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [String] :status Status filter
    # @return [PhoneSenderCollection]
    def get_all_phone_senders(opts = {})
      data, _status_code, _headers = get_all_phone_senders_with_http_info(opts)
      data
    end

    # Get all phone senders
    # Returns all phone senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Element offset (starting at zero for the first element)
    # @option opts [Integer] :limit Number of items to return
    # @option opts [String] :status Status filter
    # @return [Array<(PhoneSenderCollection, Fixnum, Hash)>] PhoneSenderCollection data, response status code and response headers
    def get_all_phone_senders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.get_all_phone_senders ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling SendersApi.get_all_phone_senders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_phone_senders, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SendersApi.get_all_phone_senders, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['active', 'moderation', 'rejected'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of active, moderation, rejected'
      end
      # resource path
      local_var_path = '/senders/phone'

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhoneSenderCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#get_all_phone_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email sender
    # Updates an email sender
    # @param sender_id ID of the Sender
    # @param email_sender_put_request Parameters for the contact
    # @param [Hash] opts the optional parameters
    # @return [EmailSender]
    def put_email_sender(sender_id, email_sender_put_request, opts = {})
      data, _status_code, _headers = put_email_sender_with_http_info(sender_id, email_sender_put_request, opts)
      data
    end

    # Update email sender
    # Updates an email sender
    # @param sender_id ID of the Sender
    # @param email_sender_put_request Parameters for the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSender, Fixnum, Hash)>] EmailSender data, response status code and response headers
    def put_email_sender_with_http_info(sender_id, email_sender_put_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.put_email_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.put_email_sender"
      end
      # verify the required parameter 'email_sender_put_request' is set
      if @api_client.config.client_side_validation && email_sender_put_request.nil?
        fail ArgumentError, "Missing the required parameter 'email_sender_put_request' when calling SendersApi.put_email_sender"
      end
      # resource path
      local_var_path = '/senders/email/{sender_id}'.sub('{' + 'sender_id' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_sender_put_request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSender')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#put_email_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
