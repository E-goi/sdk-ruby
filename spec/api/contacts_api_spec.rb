=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'spec_helper'
require 'json'

# Unit tests for EgoiRubyClient::ContactsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ContactsApi' do
  before do
    # run before each test
    @instance = EgoiRubyClient::ContactsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContactsApi' do
    it 'should create an instance of ContactsApi' do
      expect(@instance).to be_instance_of(EgoiRubyClient::ContactsApi)
    end
  end

  # unit tests for action_attach_tag
  # Attach tag to contact
  # Attaches a tag to the provided contacts
  # @param list_id ID of the List
  # @param attach_tag_request Parameters for the Tag
  # @param [Hash] opts the optional parameters
  # @return [AttachTagResponse]
  describe 'action_attach_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for action_detach_tag
  # Detach tag to contact
  # Detach a tag to the provided contacts
  # @param list_id ID of the List
  # @param attach_tag_request Parameters for the Tag
  # @param [Hash] opts the optional parameters
  # @return [AttachTagResponse]
  describe 'action_detach_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for action_export_contacts
  # Exports a list of contacts
  # Exports a list of contacts to the desired callback url
  # @param list_id ID of the List
  # @param contact_export_request Parameters for export
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'action_export_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for action_import_bulk
  # Import collection of contacts
  # Imports a collection of contacts
  # @param list_id ID of the List
  # @param import_bulk_request Parameters for the bulk import
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'action_import_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for action_start_automation
  # Start automation
  # Start automation to the provided contacts
  # @param list_id ID of the List
  # @param start_automation_request Parameters for the operation to start automation
  # @param [Hash] opts the optional parameters
  # @return [StartAutomationResponse]
  describe 'action_start_automation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for action_unsubscribe_contact
  # Unsubscribes contacts
  # Unsubscribes contacts
  # @param list_id ID of the List
  # @param remove_request Parameters for the contact to unsubscribe
  # @param [Hash] opts the optional parameters
  # @return [RemoveResponse]
  describe 'action_unsubscribe_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact
  # Create new contact
  # Create a new contact
  # @param list_id ID of the list where the contact belongs
  # @param contact_base_extra Parameters for the Contact
  # @param [Hash] opts the optional parameters
  # @return [CreateContactResponse]
  describe 'create_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_contact_activities
  # Get all contact activities
  # Returns all contact activities
  # @param contact_id ID of the Contact
  # @param list_id ID of the List
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Element offset (starting at zero for the first element)
  # @option opts [Integer] :limit Number of items to return
  # @option opts [DateTime] :date_min Start date
  # @option opts [DateTime] :date_max End date
  # @return [ActivityCollection]
  describe 'get_all_contact_activities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_contacts
  # Get all contacts
  # Returns all contacts
  # @param list_id ID of the List
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Element offset (starting at zero for the first element)
  # @option opts [Integer] :limit Number of items to return
  # @return [ContactCollection]
  describe 'get_all_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact
  # Get contact
  # Returns contact information given its ID
  # @param contact_id ID of the Contact
  # @param list_id ID of the List
  # @param [Hash] opts the optional parameters
  # @return [ComplexContact]
  describe 'get_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_contact
  # Update a specific contact
  # Update contact
  # @param contact_id ID of the Contact
  # @param list_id ID of the List
  # @param contact_base_status_extra Parameters for the contact
  # @param [Hash] opts the optional parameters
  # @return [CreateContactResponse]
  describe 'patch_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
