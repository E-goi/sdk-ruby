=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'spec_helper'
require 'json'

# Unit tests for EgoiRubyClient::AdvancedReportsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdvancedReportsApi' do
  before do
    # run before each test
    @instance = EgoiRubyClient::AdvancedReportsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdvancedReportsApi' do
    it 'should create an instance of AdvancedReportsApi' do
      expect(@instance).to be_instance_of(EgoiRubyClient::AdvancedReportsApi)
    end
  end

  # unit tests for generate_email_bounces_report
  # Generate email bounces report
  # Generates a new email bounces report
  # @param generate_email_bounces_report Parameters for the email bounces report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_bounces_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_email_clicks_by_contact_report
  # Generate email clicks by contact report
  # Generates a new email clicks by contact report
  # @param generate_email_clicks_by_contact_report Parameters for the email clicks by contact report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_clicks_by_contact_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_email_clicks_by_url_report
  # Generate email clicks by URL report
  # Generates a new email clicks by URL report
  # @param generate_email_clicks_by_url_report Parameters for the email clicks by URL report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_clicks_by_url_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_email_events_report
  # Generate email events report
  # Generates a new email events report
  # @param generate_email_events_report Parameters for the email events report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_events_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_email_sms_report
  # Generate SMS bounces report
  # Generates a new SMS bounces report
  # @param generate_sms_bounces_report Parameters for the SMS bounces report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_sms_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_email_unsubscriptions_report
  # Generate email unsubscriptions report
  # Generates a new email unsubscriptions report
  # @param generate_email_unsubscriptions_report Parameters for the email unsubscriptions report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_email_unsubscriptions_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_form_answers_report
  # Generate form answers report
  # Generates a new form answers report
  # @param generate_form_answers_report Parameters for the form answers report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_form_answers_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_sends_report
  # Generate sends report
  # Generates a new sends report
  # @param generate_sends_report Parameters for the sends report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_sends_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_sms_events_report
  # Generate SMS events report
  # Generates a new SMS events report
  # @param generate_sms_events_report Parameters for the SMS events report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_sms_events_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_subscriptions_report
  # Generate subscriptions report
  # Generates a new subscriptions report
  # @param generate_subscriptions_report Parameters for the subscriptions report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_subscriptions_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_unsubscriptions_report
  # Generate unsubscriptions report
  # Generates a new unsubscriptions report
  # @param generate_unsubscriptions_report Parameters for the unsubscriptions report
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'generate_unsubscriptions_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_advanced_reports
  # Get all advanced reports
  # Returns all advanced reports
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Advanced report status
  # @option opts [String] :title Advanced report title
  # @option opts [DateTime] :created_min Created initial date
  # @option opts [DateTime] :created_max Created finish
  # @option opts [Integer] :offset Element offset (starting at zero for the first element)
  # @option opts [Integer] :limit Number of items to return
  # @option opts [String] :order Type of order
  # @option opts [String] :order_by Reference attribute to order the advanced reports
  # @return [AdvancedReportsCollection]
  describe 'get_all_advanced_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
