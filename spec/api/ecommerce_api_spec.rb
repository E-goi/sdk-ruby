=begin
#APIv3 (Beta)

# # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>

OpenAPI spec version: 3.0.0-beta

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'spec_helper'
require 'json'

# Unit tests for EgoiRubyClient::EcommerceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EcommerceApi' do
  before do
    # run before each test
    @instance = EgoiRubyClient::EcommerceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EcommerceApi' do
    it 'should create an instance of EcommerceApi' do
      expect(@instance).to be_instance_of(EgoiRubyClient::EcommerceApi)
    end
  end

  # unit tests for create_catalog
  # Create new catalog
  # Creates a new catalog
  # @param catalog_post_request Parameters for the Catalog
  # @param [Hash] opts the optional parameters
  # @return [Catalog]
  describe 'create_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_product
  # Create new product
  # Creates a new product
  # @param catalog_id ID of the Catalog
  # @param product_post_request Parameters for the Product
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'create_product test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_catalog
  # Remove catalog
  # Remove catalog information given its ID
  # @param catalog_id ID of the Catalog
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_product
  # Remove product
  # Remove product information given its ID
  # @param catalog_id ID of the Catalog
  # @param product_identifier ID of the Product
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_product test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_catalogs
  # Get all catalogs
  # Returns all catalogs
  # @param [Hash] opts the optional parameters
  # @return [CatalogCollection]
  describe 'get_all_catalogs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_products
  # Get all products
  # Returns all products for the given catalog
  # @param catalog_id ID of the Catalog
  # @param [Hash] opts the optional parameters
  # @option opts [String] :product_identifier Product ID in your store
  # @option opts [Integer] :offset Element offset (starting at zero for the first element)
  # @option opts [Integer] :limit Number of items to return
  # @return [ProductCollection]
  describe 'get_all_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_product
  # Get product
  # Returns product information given its ID
  # @param catalog_id ID of the Catalog
  # @param product_identifier ID of the Product
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'get_product test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_orders_bulk
  # Orders import bulk request
  # Creates new bulk orders syncronization
  # @param list_id ID of the List
  # @param import_orders_bulk_bulk_request Parameters for the Orders
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'import_orders_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_products
  # Import products
  # Imports a collection of products&lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)
  # @param catalog_id ID of the Catalog
  # @param product_bulk_request Parameters for the Product
  # @param [Hash] opts the optional parameters
  # @return [AcceptedResponse]
  describe 'import_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_product
  # Update product
  # Updates a product
  # @param catalog_id ID of the Catalog
  # @param product_identifier ID of the Product
  # @param product_patch_request Parameters for the product
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'update_product test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
